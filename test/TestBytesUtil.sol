pragma solidity ^0.4.24;


import "../contracts/BytesUtil.sol";
import "truffle/Assert.sol";

contract TestBytesUtil {
    function test_readBytes32_zero_start_idx() public {
        bytes memory b = hex"0000000000000000000000000000000000000000000000000000000000000240689802d6ed1a28b049e9d4fe5334c5902fd9bc00c42821c82f82ee2da10be90840e51f1c845d99162de6c210a9eaff4729f433ac605be8f3cde6d2e0afa44aeb16a4818ca2f4db4c2fc2e9a24cc8d1a29669a34934a8366365dac058075a0bb4d0e1637869837c04c7c7e9c96d75932934e5ab7066e7710da447a747455eb9573578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        uint256 result = uint256(BytesUtil.readBytes32(b, 0));
        Assert.equal(result, 576, "wrong 32 byte integer");
    }

    function test_readBytes32_non_zero_start_idx() public {
        bytes memory b = hex"0000000000000000000000000000000000000000000000000000000000000240689802d6ed1a28b049e9d4fe5334c5902fd9bc00c42821c82f82ee2da10be90840e51f1c845d99162de6c210a9eaff4729f433ac605be8f3cde6d2e0afa44aeb16a4818ca2f4db4c2fc2e9a24cc8d1a29669a34934a8366365dac058075a0bb4d0e1637869837c04c7c7e9c96d75932934e5ab7066e7710da447a747455eb9573578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd0000000000000000000000000000000000000000000000000000000000000240471703c5eda8644a64cec152c58f5aacec93d72fb0bfa705f0473f9043a8357cf87315d6fc6a3884f38b5d22a4008bad84b1727ee7cb40eca236d303a2ec152c606e376491b24f88f4f119903f81e2170272bdb92b3e3005766800ecb813e8f366fd5c8ce475f9709928be00e01f3a74a5ac1c7f407cfaac2b238b73362599893578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        uint256 size1 = uint256(BytesUtil.readBytes32(b, 0));
        uint256 size2 = uint256(BytesUtil.readBytes32(b, size1 + 32));
        Assert.equal(size2, 576, "wrong 32 byte integer");
    }

    function test_substr_zero_start_idx() public {
        bytes memory b = hex"0000000000000000000000000000000000000000000000000000000000000240689802d6ed1a28b049e9d4fe5334c5902fd9bc00c42821c82f82ee2da10be90840e51f1c845d99162de6c210a9eaff4729f433ac605be8f3cde6d2e0afa44aeb16a4818ca2f4db4c2fc2e9a24cc8d1a29669a34934a8366365dac058075a0bb4d0e1637869837c04c7c7e9c96d75932934e5ab7066e7710da447a747455eb9573578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        bytes memory exp = hex"689802d6ed1a28b049e9d4fe5334c5902fd9bc00c42821c82f82ee2da10be90840e51f1c845d99162de6c210a9eaff4729f433ac605be8f3cde6d2e0afa44aeb16a4818ca2f4db4c2fc2e9a24cc8d1a29669a34934a8366365dac058075a0bb4d0e1637869837c04c7c7e9c96d75932934e5ab7066e7710da447a747455eb9573578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        uint256 size = uint256(BytesUtil.readBytes32(b, 0));
        bytes memory result = BytesUtil.substr(b, 32, size);
        Assert.equal(keccak256(result), keccak256(exp), "wrong bytes substring");
    }

    function test_substr_non_zero_start_idx() public {
        bytes memory b = hex"0000000000000000000000000000000000000000000000000000000000000240689802d6ed1a28b049e9d4fe5334c5902fd9bc00c42821c82f82ee2da10be90840e51f1c845d99162de6c210a9eaff4729f433ac605be8f3cde6d2e0afa44aeb16a4818ca2f4db4c2fc2e9a24cc8d1a29669a34934a8366365dac058075a0bb4d0e1637869837c04c7c7e9c96d75932934e5ab7066e7710da447a747455eb9573578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd0000000000000000000000000000000000000000000000000000000000000240471703c5eda8644a64cec152c58f5aacec93d72fb0bfa705f0473f9043a8357cf87315d6fc6a3884f38b5d22a4008bad84b1727ee7cb40eca236d303a2ec152c606e376491b24f88f4f119903f81e2170272bdb92b3e3005766800ecb813e8f366fd5c8ce475f9709928be00e01f3a74a5ac1c7f407cfaac2b238b73362599893578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        bytes memory exp = hex"471703c5eda8644a64cec152c58f5aacec93d72fb0bfa705f0473f9043a8357cf87315d6fc6a3884f38b5d22a4008bad84b1727ee7cb40eca236d303a2ec152c606e376491b24f88f4f119903f81e2170272bdb92b3e3005766800ecb813e8f366fd5c8ce475f9709928be00e01f3a74a5ac1c7f407cfaac2b238b73362599893578aa04f96a91439e3297063d64507094f2338f9b3addeb19ca3fcfa3f8dba8813d604f8778f0081980f43db1eda25d942a4cb39411e2c3936676db4d6ab243e96cf95c97546716ccbbfc716b6234f5d9901de9b539e1f0f3ac28fd2e6cc7b2612b848833efa56a3d56eaeffb0e72bb08ee1fa2c2dfb1f3e07d7b8ce8ebdcdc83320254bff802cad67a9db156ff9a31c58a492e38bd1648498d789d6b3298ab28a86717b5401521bf4866d5e612d86ab0d68f8cae00c74ff6b7118e54bb65474c5e90aaf797bba2cd8013ce820a67e9ce930066a502f46fddb76230222a727704fc9d34ff444d640e7925f576da3fabffddd5af1dd93ea7d05921bf7669f19e2792b7df3923d4660bd0102be03f689ead17031477bcc9da773f9b8fc84c7b1f77789c32e393663d7ef120a7fcabedc42a1fa5153af77d0517dcd365050109aaffdda11c75930f0ef370cddca73bf3104e34df17701d7cb9f946f4805529e05a0cabd7ee75fc1887c9185e7fdeec96a6fb78dd9e778111c4c0fe97b34b4b4a624584ac03a821d6333c7384c8cbe8bf3761353a01040a07c2ccd4c9c5b69d322f0cb95138a873f2f5c5740a50efd16531f930ff8a955d63567772b6b53a87bcdd";
        uint256 size1 = uint256(BytesUtil.readBytes32(b, 0));
        uint256 size2 = uint256(BytesUtil.readBytes32(b, size1 + 32));
        bytes memory result = BytesUtil.substr(b, size1 + 64, size2);
        Assert.equal(keccak256(result), keccak256(exp), "wrong bytes substring");
    }
}